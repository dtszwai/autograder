const v="settings",k="user",_="courses",A="assignments",R="toggleInjection",U="refreshData",j="reloadAssignments",G="pollTaskStatuses",L="openOptionsPage",K="getOptionsData",T="tasksUpdated",q="viewTask",p=s=>`tasks#${s}`,B=s=>`tasks:likes#${s}`,u=()=>"idx:tasks",c=(s,t)=>chrome.storage.local.set({[s]:t}),g=s=>chrome.storage.local.get(s).then(t=>t[s]),P=s=>chrome.storage.local.remove(s),z=()=>Promise.all([chrome.storage.local.clear(),chrome.storage.sync.clear(),chrome.action.setBadgeText({text:"!"})]),E=async s=>{const t=await g(p(s));if(t)return D(t)},I=async s=>{const{courseId:t,assignmentId:e}=s??{},a=await g(u());if(!a)return[];const o=(await Promise.all(a.map(n=>E(n)))).filter(n=>n!=null);return o.filter(n=>{const r=t?n.request.course.id===t:!0,i=e?n.request.assignment.id===e:!0;return r&&i}),o.filter(n=>{const r=t?n.request.course.id===t:!0,i=e?n.request.assignment.id===e:!0;return r&&i})},F=async s=>{await Promise.all([await c(p(s.id),S(s)),await O(s.id)]),await chrome.runtime.sendMessage({type:T,payload:"#task"})},M=async s=>{await Promise.all(s.map(async t=>{await C(t),await P(p(t))})),await chrome.runtime.sendMessage({type:T})},$=async(s,t)=>{await c(p(s),S(t))},O=async s=>{const t=await g(u());t?(t.push(s),await c(u(),t)):await c(u(),[s])},C=async s=>{const t=await g(u());if(t){const e=t.indexOf(s);e!==-1&&(t.splice(e,1),await c(u(),t))}},S=s=>({...s,createdAt:s.createdAt.toISOString()}),D=s=>({...s,createdAt:new Date(s.createdAt)});var y=(s=>(s.SUCCESS="SUCCESS",s.PENDING="PENDING",s.FAILURE="FAILURE",s.STARTED="STARTED",s))(y||{});const w="http://localhost:8000/api/v1",J=async s=>(await(await fetch(`${w}/grading/generate`,{method:"POST",body:JSON.stringify(s),headers:{"Content-Type":"application/json"}})).json()).task_id,H=async()=>{const t=(await I()).filter(e=>e.details.status===y.PENDING||e.details.status===y.STARTED);await Promise.all(t.map(async e=>{const o=await(await fetch(`${w}/grading/status/${e.id}`)).json();e.details=o,await $(e.id,e)}))},V=async(s,t)=>{console.log(t),await fetch(`${w}/scores`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({evaluation_id:s,score:t})})},W=async s=>{const t=new FormData;return t.append("file",s),(await(await fetch(`${w}/documents/upload`,{method:"POST",body:t})).json()).pdf_id},x=async()=>{const s=await g("settings");if(!s)throw new Error("Settings not found in storage");const{baseURL:t,token:e}=s;return{baseURL:t,token:e}},Q=async(s,t)=>await(await fetch(`${t}/api/v1/users/self`,{headers:{Authorization:`Bearer ${s}`}})).json(),d=async(s,t={},e={})=>{const{baseURL:a,token:o}=await x(),n=`${a}/api/v1${s}`,r=new URL(n),[,i]=s.split("?");i&&new URLSearchParams(i).forEach((h,f)=>{r.searchParams.append(f,h)}),Object.entries(t).forEach(([l,h])=>{r.searchParams.append(l,String(h))}),r.searchParams.has("per_page")||r.searchParams.set("per_page","1000");const m=await fetch(r.toString(),{...e,headers:{"Content-Type":"application/json",Authorization:`Bearer ${o}`,...e.headers}});if(!m.ok){const l=await m.text();throw new Error(`HTTP error! status: ${m.status}, message: ${l}`)}return await m.json()},X=async(s,t={})=>{const e=await d(`/courses/${s}`,t);return{...e,id:e.id.toString()}},Y=async(s,t,e={})=>{const a=await d(`/courses/${s}/assignments/${t}`,e);return{...a,id:a.id.toString()}},Z=async(s,t,e={})=>(await d(`/courses/${s}/assignments/${t}/submissions`,e)).map(o=>({...o,id:o.id.toString()})),N=async()=>{const[s,t]=await Promise.all([d("/courses",{enrollment_type:"teacher",enrollment_state:"active","include[]":"needs_grading_count"}),d("/courses",{enrollment_type:"ta",enrollment_state:"active","include[]":"needs_grading_count"})]),e=new Map;return[...s,...t].forEach(a=>{e.set(a.id,{...a,id:a.id.toString()})}),Array.from(e.values())},b=async s=>{const t=await Promise.all(s.map(o=>d(`/courses/${o.id}/assignments`,{"include[]":"needs_grading_count"}).then(n=>({courseId:o.id,assignments:n.map(r=>({...r,id:r.id.toString()}))}))));let e=0;const a={};return t.forEach(({courseId:o,assignments:n})=>{const r=n.filter(i=>i.needs_grading_count?(e+=i.needs_grading_count,!0):!1);a[o]=r}),{assignmentsByCourse:a,totalNeedsGradingCount:e}},ss=async()=>{const s=await N(),{totalNeedsGradingCount:t,assignmentsByCourse:e}=await b(s);await c(_,s),await c(A,e);const a=t>99?"99+":t>0?t.toString():"";await chrome.action.setBadgeText({text:a})},ts=async s=>{const{courseId:t,assignmentId:e,userId:a,grade:o,comment:n}=s;await d(`/courses/${t}/assignments/${e}/submissions/${a}`,{},{method:"PUT",body:JSON.stringify({submission:{posted_grade:o},comment:{text_comment:n}})})};export{F as A,K as G,L as O,G as P,j as R,R as T,q as V,Y as a,Z as b,g as c,v as d,I as e,H as f,X as g,T as h,E as i,$ as j,U as k,y as l,M as m,k as n,B as o,ts as p,V as q,ss as r,c as s,p as t,W as u,z as v,Q as w,_ as x,A as y,J as z};
